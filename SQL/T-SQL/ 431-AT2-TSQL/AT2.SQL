USE AT2DB;
-- Question 1.
DROP VIEW IF EXISTS [1868_ENROL_SUMMARY];
GO
CREATE VIEW [1868_ENROL_SUMMARY] AS
    SELECT S.SUBJCODE, S.DESCRIPTION, SO.SEMESTER, SO.YEAR, SO.FEE, COUNT(E.SUBJCODE) AS [NUM ENROLLMENTS]
    FROM SUBJECT S
    LEFT JOIN SUBJECTOFFERING SO
    ON S.SUBJCODE = SO.SUBJCODE
    LEFT JOIN ENROLMENT E
    ON SO.SUBJCODE = E.SUBJCODE AND SO.YEAR = E.YEAR AND SO.SEMESTER = E.SEMESTER
    GROUP BY S.SUBJCODE, S.DESCRIPTION, SO.SEMESTER, SO.YEAR, SO.FEE;
GO
SELECT * FROM [1868_ENROL_SUMMARY];



-- Question 2.
DROP VIEW IF EXISTS [1868_TEACHING_LOAD];
GO
CREATE VIEW [1868_TEACHING_LOAD] AS
    SELECT T.STAFFID, T.GIVENNAME, T.SURNAME, SO.YEAR, SO.SEMESTER, COUNT(SO.STAFFID) AS [NUM CLASSES]
    FROM [TEACHER] T
    LEFT JOIN SUBJECTOFFERING SO
    ON T.STAFFID = SO.STAFFID
    INNER JOIN ENROLMENT E
    ON SO.SUBJCODE = E.SUBJCODE AND SO.YEAR = E.YEAR AND SO.SEMESTER = E.SEMESTER
    GROUP BY T.STAFFID, T.GIVENNAME, T.SURNAME, SO.YEAR, SO.SEMESTER
GO
SELECT * FROM [1868_TEACHING_LOAD];



-- Question 3.
DROP PROCEDURE IF EXISTS [1868_GET_STUDENT_BY_ID];
GO
CREATE PROCEDURE [1868_GET_STUDENT_BY_ID] (@STUID NVARCHAR(10)) AS
BEGIN
    BEGIN TRY
        DECLARE @STUIDCHECK NVARCHAR(10);

        SET @STUIDCHECK = (SELECT S.StudentID
                            FROM STUDENT S
                            WHERE S.STUDENTID = @STUID);
        
        IF @STUIDCHECK IS NULL
            THROW 50010, 'NO SUCH STUDENT IN SYSTEM', 1;
        ELSE
            SELECT S.*
            FROM Student S
            WHERE S.STUDENTID = @STUID;
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() = 50010
            THROW 50010, 'NO SUCH STUDENT IN SYSTEM', 1
        ELSE 
            THROW
    END CATCH
END
GO
EXEC [1868_GET_STUDENT_BY_ID] "S111111111"
GO
EXEC [1868_GET_STUDENT_BY_ID] "S"
GO



-- Question 4
DROP PROCEDURE IF EXISTS [1868_UPDATE_STUDENT]
GO
CREATE PROCEDURE [1868_UPDATE_STUDENT] (@STUID NVARCHAR(10), @FNAME NVARCHAR(100), @LNAME NVARCHAR(100), @GENDER NVARCHAR(1)) AS
BEGIN
    BEGIN TRY
        DECLARE @STUIDCHECK NVARCHAR(10);

        SET @STUIDCHECK = (SELECT S.StudentID
                            FROM STUDENT S
                            WHERE S.STUDENTID = @STUID);
        
        IF @STUIDCHECK IS NULL
            THROW 50010, 'NO SUCH STUDENT IN SYSTEM', 1;
        ELSE
            UPDATE STUDENT
            SET SURNAME = @LNAME, GIVENNAME = @FNAME, GENDER = @GENDER
            WHERE STUDENTID = @STUID;
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() = 50010
            THROW 50010, 'NO SUCH STUDENT IN SYSTEM', 1
        ELSE IF @FNAME IS NULL OR @LNAME IS NULL
            THROW 50030, 'FIRST OR LAST NAME CANNOT BE NULL', 1
        ELSE IF @GENDER != 'M' OR @GENDER != 'F' OR @GENDER != 'I'
            THROW 50020, 'INVALID GENDER VALUE ENTERED', 1
        ELSE 
            DECLARE @ERROR_MESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            RAISERROR (@ERROR_MESSAGE, 16, 1);
    END CATCH
END
GO
EXEC [1868_UPDATE_STUDENT] "S111111111", "NULL", NULL, "F" -- 50030
GO 
EXEC [1868_UPDATE_STUDENT] "S222222222", "John", "Smith", "Q" -- 50020
GO
EXEC [1868_UPDATE_STUDENT] "W", "Jevon", "Diamond", "M" -- 50010
GO
EXEC [1868_UPDATE_STUDENT] "S111111111", "Sinatra", "Frank", "M" -- In database
GO



-- Question 5.
INSERT INTO Student(STUDENTID, SURNAME, GIVENNAME, GENDER)
VALUES ('S1', 'Jevon', 'jevon', 'M')
GO

DROP PROCEDURE IF EXISTS [1868_DELETE_STUDENT]
GO
CREATE PROCEDURE [1868_DELETE_STUDENT] (@STUID NVARCHAR(10)) AS
BEGIN
    BEGIN TRY
        DECLARE @STUIDCHECK NVARCHAR(10);

        SET @STUIDCHECK = (SELECT S.StudentID
                            FROM STUDENT S
                            WHERE S.STUDENTID = @STUID);
        
        IF @STUIDCHECK IS NULL
            THROW 50010, 'NO SUCH STUDENT IN SYSTEM', 1;
        ELSE
            DELETE FROM STUDENT
            WHERE STUDENTID = @STUID;
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() = 50010
            THROW 50010, 'NO SUCH STUDENT IN SYSTEM', 1
        ELSE 
            DECLARE @ERROR_MESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            RAISERROR (@ERROR_MESSAGE, 16, 1);
    END CATCH
END
GO
EXEC [1868_DELETE_STUDENT] "S1"
GO
EXEC [1868_DELETE_STUDENT] "S111111111"
GO


-- Question 6.
INSERT INTO Student(STUDENTID, SURNAME, GIVENNAME, GENDER)
VALUES ('S9', 'Smith', 'John', 'M')
GO

DROP TRIGGER IF EXISTS [1868_DELETE_STUDENT_LOG]
GO
CREATE TRIGGER [1868_TRG_DELETE_STUDENT] ON STUDENT FOR DELETE AS
BEGIN
    BEGIN TRY
        DECLARE @STUID NVARCHAR(10);
        DECLARE @FNAME NVARCHAR(100);
        DECLARE @LNAME NVARCHAR(100);
        DECLARE @GENDER NVARCHAR(1);
        DECLARE @DATE NVARCHAR(10);

        SET @STUID = (SELECT StudentID FROM DELETED);
        SET @FNAME = (SELECT GIVENNAME FROM DELETED);
        SET @LNAME = (SELECT SURNAME FROM DELETED);
        SET @GENDER = (SELECT GENDER FROM DELETED);

        INSERT INTO PAST_STUDENT_LOG (DATETIMEDELETED, STUDENTID, GIVENNAME, SURNAME, GENDER)
        VALUES (GETDATE(), @STUID, @FNAME, @LNAME, @GENDER)
    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        RAISERROR (@ERROR_MESSAGE, 16, 1);
    END CATCH
END

SELECT * FROM Student
GO
EXEC [1868_DELETE_STUDENT] "S9"
GO
SELECT * FROM PAST_STUDENT_LOG
GO

-- Question 7.
DROP FUNCTION IF EXISTS [1868_MEGA_UBER_COEFFICIENT]
GO
CREATE FUNCTION [1868_MEGA_UBER_COEFFICIENT](@INPUT1 DECIMAL, @INPUT2 DECIMAL, @INPUT3 DECIMAL)
RETURNS DECIMAL AS
BEGIN
    DECLARE @RESULT DECIMAL = (@INPUT1 + @INPUT2) * @INPUT3 / @INPUT1;
    RETURN @RESULT;
END
GO

-- Expected @RESULT = 14 (14.17)
SELECT dbo.[1868_MEGA_UBER_COEFFICIENT](69, 420, 2) AS [RESULT]
GO

-- Question 8.
DROP PROCEDURE IF EXISTS [1868_ENROL_NEW_STUDENT]
GO
CREATE PROCEDURE [1868_ENROL_NEW_STUDENT] @STUID NVARCHAR(10), @FNAME NVARCHAR(100), @LNAME NVARCHAR(100), @GENDER NVARCHAR(1), @SUBJCODE NVARCHAR(10), @YEAR INT, @SEMESTER INT AS
BEGIN
    SET TRANSACTION ISOLATION LEVEL READ COMMITTED
    BEGIN TRANSACTION
        BEGIN TRY
            DECLARE @STUIDCHECK NVARCHAR(10);
            
            SET @STUIDCHECK = (SELECT SE.StudentID
                                FROM STUDENT_ENROLMENTS SE
                                WHERE SE.STUDENTID = @STUID);
            IF @STUIDCHECK = @STUID
                THROW 50050, 'Student already in the system', 1;
            ELSE
                INSERT INTO STUDENT (STUDENTID, GIVENNAME, SURNAME, GENDER)
                VALUES (@STUID, @FNAME, @LNAME, @GENDER);
                INSERT INTO ENROLMENT (STUDENTID, SUBJCODE, YEAR, SEMESTER, DATEENROLLED)
                VALUES (@STUID, @SUBJCODE, @YEAR, @SEMESTER, GETDATE());
                COMMIT TRANSACTION
        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION
            IF ERROR_NUMBER() = 50050
                THROW 50050, 'Student already in the system STUDENT ALREADY IN THE SYSTEM', 1
            ELSE 
                DECLARE @ERROR_MESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                RAISERROR (@ERROR_MESSAGE, 16, 1);
        END CATCH
END

-- Test student already exists
EXEC [1868_ENROL_NEW_STUDENT] "S10", "John", "Smith", "M", "COMP1001", 2019, 1
GO
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT *
FROM STUDENT
SELECT E.SUBJCODE, E.YEAR, E.SEMESTER, E.DATEENROLLED
FROM ENROLMENT E

-- Test NULL student name
EXEC [1868_ENROL_NEW_STUDENT] "S11", NULL, "Smith", "M", "COMP1001", 2019, 1
GO
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT *
FROM STUDENT
SELECT E.SUBJCODE, E.YEAR, E.SEMESTER, E.DATEENROLLED
FROM ENROLMENT E

-- Test invalid subject code
EXEC [1868_ENROL_NEW_STUDENT] "S11", "John", "Smith", "M", "djsfkjsfes", 2019, 1
GO
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT *
FROM STUDENT
SELECT E.SUBJCODE, E.YEAR, E.SEMESTER, E.DATEENROLLED
FROM ENROLMENT E

-- Test valid data
EXEC [1868_ENROL_NEW_STUDENT] "S11", "John", "Smith", "M", "COMP1001", 2019, 1
GO
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT *
FROM STUDENT
SELECT E.SUBJCODE, E.YEAR, E.SEMESTER, E.DATEENROLLED
FROM ENROLMENT E


SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT * FROM STUDENT_ENROLMENTS
-- SELECT * FROM STUDENT
-- SELECT * FROM 

